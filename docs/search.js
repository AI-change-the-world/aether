window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "aether", "modulename": "aether", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api", "modulename": "aether.api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api.generic", "modulename": "aether.api.generic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api.input", "modulename": "aether.api.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api.input.DataSource", "modulename": "aether.api.input", "qualname": "DataSource", "kind": "class", "doc": "<p>\u6570\u636e\u6e90\u7c7b\u578b\u679a\u4e3e\u7c7b</p>\n\n<p>\u5b9a\u4e49\u4e86\u4e09\u79cd\u6570\u636e\u6e90\u7c7b\u578b\uff1a</p>\n\n<ul>\n<li>S3: Amazon S3\u5b58\u50a8\u6876</li>\n<li>LOCAL: \u672c\u5730\u6587\u4ef6\u7cfb\u7edf</li>\n<li>BASE64: Base64\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u6570\u636e</li>\n</ul>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "aether.api.input.DataSource.S3", "modulename": "aether.api.input", "qualname": "DataSource.S3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataSource.S3: &#x27;s3&#x27;&gt;"}, {"fullname": "aether.api.input.DataSource.LOCAL", "modulename": "aether.api.input", "qualname": "DataSource.LOCAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataSource.LOCAL: &#x27;local&#x27;&gt;"}, {"fullname": "aether.api.input.DataSource.BASE64", "modulename": "aether.api.input", "qualname": "DataSource.BASE64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataSource.BASE64: &#x27;base64&#x27;&gt;"}, {"fullname": "aether.api.input.DataSource.NONE", "modulename": "aether.api.input", "qualname": "DataSource.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataSource.NONE: &#x27;none&#x27;&gt;"}, {"fullname": "aether.api.input.DataType", "modulename": "aether.api.input", "qualname": "DataType", "kind": "class", "doc": "<p>\u6570\u636e\u7c7b\u578b\u679a\u4e3e\u7c7b</p>\n\n<p>\u5b9a\u4e49\u4e86\u7cfb\u7edf\u652f\u6301\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u7ee7\u627f\u81eastr\u548cEnum\uff0c\n\u4f7f\u5f97\u679a\u4e3e\u503c\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f7f\u7528\uff0c\u53c8\u5177\u6709\u679a\u4e3e\u7684\u7279\u6027</p>\n\n<p>\u679a\u4e3e\u503c:\n    TEXT: \u6587\u672c\u7c7b\u578b\n    IMAGE: \u56fe\u50cf\u7c7b\u578b\n    VIDEO: \u89c6\u9891\u7c7b\u578b\n    AUDIO: \u97f3\u9891\u7c7b\u578b\n    AUTO: \u81ea\u52a8\u8bc6\u522b\u7c7b\u578b</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "aether.api.input.DataType.TEXT", "modulename": "aether.api.input", "qualname": "DataType.TEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataType.TEXT: &#x27;text&#x27;&gt;"}, {"fullname": "aether.api.input.DataType.IMAGE", "modulename": "aether.api.input", "qualname": "DataType.IMAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataType.IMAGE: &#x27;image&#x27;&gt;"}, {"fullname": "aether.api.input.DataType.VIDEO", "modulename": "aether.api.input", "qualname": "DataType.VIDEO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataType.VIDEO: &#x27;video&#x27;&gt;"}, {"fullname": "aether.api.input.DataType.AUDIO", "modulename": "aether.api.input", "qualname": "DataType.AUDIO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataType.AUDIO: &#x27;audio&#x27;&gt;"}, {"fullname": "aether.api.input.DataType.AUTO", "modulename": "aether.api.input", "qualname": "DataType.AUTO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataType.AUTO: &#x27;auto&#x27;&gt;"}, {"fullname": "aether.api.input.Input", "modulename": "aether.api.input", "qualname": "Input", "kind": "class", "doc": "<p>\u8f93\u5165\u6570\u636e\u6a21\u578b\u7c7b\uff0c\u7528\u4e8e\u5b9a\u4e49\u548c\u9a8c\u8bc1\u8f93\u5165\u6570\u636e\u7684\u7ed3\u6784</p>\n\n<p>\u53c2\u6570:\n    data (str): \u8f93\u5165\u7684\u6570\u636e\u5185\u5bb9\n    data_type (DataType): \u6570\u636e\u7c7b\u578b\uff0c\u4f7f\u7528Field\u5b9a\u4e49\u522b\u540d\u4e3a\"data_type\"\n    data_source (DataSource): \u6570\u636e\u6765\u6e90\uff0c\u4f7f\u7528Field\u5b9a\u4e49\u522b\u540d\u4e3a\"data_source\"</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.api.input.Input.data", "modulename": "aether.api.input", "qualname": "Input.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.api.input.Input.data_type", "modulename": "aether.api.input", "qualname": "Input.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": aether.api.input.DataType"}, {"fullname": "aether.api.input.Input.data_source", "modulename": "aether.api.input", "qualname": "Input.data_source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": aether.api.input.DataSource"}, {"fullname": "aether.api.input.Input.case_insensitive", "modulename": "aether.api.input", "qualname": "Input.case_insensitive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.api.input.Input.model_config", "modulename": "aether.api.input", "qualname": "Input.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "aether.api.request", "modulename": "aether.api.request", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api.request.Execution", "modulename": "aether.api.request", "qualname": "Execution", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "aether.api.request.Execution.SYNC", "modulename": "aether.api.request", "qualname": "Execution.SYNC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Execution.SYNC: &#x27;sync&#x27;&gt;"}, {"fullname": "aether.api.request.Execution.STREAM", "modulename": "aether.api.request", "qualname": "Execution.STREAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Execution.STREAM: &#x27;stream&#x27;&gt;"}, {"fullname": "aether.api.request.Execution.ASYNC", "modulename": "aether.api.request", "qualname": "Execution.ASYNC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Execution.ASYNC: &#x27;async&#x27;&gt;"}, {"fullname": "aether.api.request.RequestMeta", "modulename": "aether.api.request", "qualname": "RequestMeta", "kind": "class", "doc": "<p>\u8bf7\u6c42\u5143\u6570\u636e\u6a21\u578b\u7c7b</p>\n\n<p>\u7528\u4e8e\u5b9a\u4e49\u8bf7\u6c42\u7684\u5143\u6570\u636e\u4fe1\u606f\uff0c\u7ee7\u627f\u81eaBaseModel</p>\n\n<p>Attributes:\n    execution (str): \u6267\u884c\u65b9\u5f0f\uff0c \u5305\u62ec sync, stream, async</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.api.request.RequestMeta.execution", "modulename": "aether.api.request", "qualname": "RequestMeta.execution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": aether.api.request.Execution"}, {"fullname": "aether.api.request.RequestMeta.auto_dispose", "modulename": "aether.api.request", "qualname": "RequestMeta.auto_dispose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.api.request.RequestMeta.model_config", "modulename": "aether.api.request", "qualname": "RequestMeta.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "aether.api.request.RegisterModelRequest", "modulename": "aether.api.request", "qualname": "RegisterModelRequest", "kind": "class", "doc": "<p>\u6a21\u578b\u6ce8\u518c\u8bf7\u6c42\u6570\u636e\u6a21\u578b\u7c7b</p>\n\n<p>\u7528\u4e8e\u5b9a\u4e49\u6a21\u578b\u6ce8\u518c\u63a5\u53e3\u7684\u8bf7\u6c42\u53c2\u6570\u7ed3\u6784\uff0c\u7ee7\u627f\u81eaBaseModel\u57fa\u7c7b</p>\n\n<p>Attributes:\n    model_name (str): \u6a21\u578b\u540d\u79f0\uff0c\u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u6a21\u578b\n    tool_type (str): \u6a21\u578b\u7c7b\u578b\uff0c\u8868\u793a\u6a21\u578b\u7684\u5206\u7c7b\u6216\u7528\u9014\n    model_path (Optional[str]): \u6a21\u578b\u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570\uff0c\u540e\u7eed\u5c06\u652f\u6301s3\u8def\u5f84\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u672c\u5730\u8def\u5f84\n    base_url (Optional[str]): \u6a21\u578b\u670d\u52a1\u7684\u57fa\u7840URL\uff0c\u53ef\u9009\u53c2\u6570\n    api_key (Optional[str]): \u8bbf\u95ee\u6a21\u578b\u670d\u52a1\u6240\u9700\u7684API\u5bc6\u94a5\uff0c\u53ef\u9009\u53c2\u6570\n    request_definition (dict): \u6a21\u578b\u8bf7\u6c42\u53c2\u6570\u5b9a\u4e49\uff0c\u63cf\u8ff0\u8c03\u7528\u6a21\u578b\u65f6\u9700\u8981\u7684\u53c2\u6570\u7ed3\u6784\n                             : TODO \u5f85\u5b8c\u5584, yolo example : {}\n    response_definition (dict): \u6a21\u578b\u54cd\u5e94\u7ed3\u679c\u5b9a\u4e49\uff0c\u63cf\u8ff0\u6a21\u578b\u8fd4\u56de\u7ed3\u679c\u7684\u7ed3\u6784\u683c\u5f0f\n                             : TODO \u5f85\u5b8c\u5584, yolo example :\n                                {\n                                            \"image\": {\n                                                \"type\": \"string\",\n                                                \"default\": \"*.png\"\n                                            },\n                                            \"bbox\": {\n                                                \"type\": \"list\",\n                                                \"default\": \"...\",\n                                                \"items\": {\n                                                \"type\": \"object\",\n                                                \"fields\": {\n                                                    \"x\": {\n                                                    \"type\": \"int\",\n                                                    \"default\": \"...\"\n                                                    },\n                                                    \"y\": {\n                                                    \"type\": \"int\",\n                                                    \"default\": \"...\"\n                                                    },\n                                                    \"w\": {\n                                                    \"type\": \"int\",\n                                                    \"default\": \"...\"\n                                                    },\n                                                    \"h\": {\n                                                    \"type\": \"int\",\n                                                    \"default\": \"...\"\n                                                    },\n                                                    \"label\": {\n                                                    \"type\": \"string\",\n                                                    \"default\": \"...\"\n                                                    }\n                                                }\n                                                }\n                                            }\n                                            }</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.api.request.RegisterModelRequest.model_name", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.api.request.RegisterModelRequest.tool_type", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.api.request.RegisterModelRequest.model_path", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.api.request.RegisterModelRequest.base_url", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.base_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.api.request.RegisterModelRequest.api_key", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.api_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.api.request.RegisterModelRequest.request_definition", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.request_definition", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "aether.api.request.RegisterModelRequest.response_definition", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.response_definition", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "aether.api.request.RegisterModelRequest.model_config", "modulename": "aether.api.request", "qualname": "RegisterModelRequest.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "aether.api.request.AetherRequest", "modulename": "aether.api.request", "qualname": "AetherRequest", "kind": "class", "doc": "<p>AetherRequest\u7c7b\u7528\u4e8e\u5b9a\u4e49\u8bf7\u6c42\u6a21\u578b\uff0c\u7ee7\u627f\u81eaBaseModel\u5e76\u652f\u6301\u6cdb\u578b</p>\n\n<p>Attributes:\n    task (str): \u4efb\u52a1\u63cf\u8ff0\u5b57\u7b26\u4e32\n    tool_id (int): \u6a21\u578bID\uff0c\u4f7f\u7528Field\u5b9a\u4e49\u522b\u540d\n    input (Input): \u8f93\u5165\u6570\u636e\u5bf9\u8c61, \u9ed8\u8ba4\u4e3a\u7a7a\n    meta (RequestMeta): \u8bf7\u6c42\u5143\u6570\u636e\u5bf9\u8c61\n    extra (Optional[T]): \u53ef\u9009\u7684\u989d\u5916\u6570\u636e\uff0c\u7c7b\u578b\u4e3a\u6cdb\u578bT\uff0c\u9ed8\u8ba4\u4e3aNone</p>\n", "bases": "pydantic.main.BaseModel, typing.Generic[~T]"}, {"fullname": "aether.api.request.AetherRequest.task", "modulename": "aether.api.request", "qualname": "AetherRequest.task", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.api.request.AetherRequest.tool_id", "modulename": "aether.api.request", "qualname": "AetherRequest.tool_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.api.request.AetherRequest.input", "modulename": "aether.api.request", "qualname": "AetherRequest.input", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[aether.api.input.Input]"}, {"fullname": "aether.api.request.AetherRequest.meta", "modulename": "aether.api.request", "qualname": "AetherRequest.meta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": aether.api.request.RequestMeta"}, {"fullname": "aether.api.request.AetherRequest.extra", "modulename": "aether.api.request", "qualname": "AetherRequest.extra", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[~T]"}, {"fullname": "aether.api.request.AetherRequest.task_validate", "modulename": "aether.api.request", "qualname": "AetherRequest.task_validate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.api.response", "modulename": "aether.api.response", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api.response.ResponseMeta", "modulename": "aether.api.response", "qualname": "ResponseMeta", "kind": "class", "doc": "<p>\u54cd\u5e94\u5143\u6570\u636e\u6a21\u578b\u7c7b</p>\n\n<p>\u7528\u4e8e\u5b58\u50a8API\u54cd\u5e94\u7684\u5143\u6570\u636e\u4fe1\u606f</p>\n\n<p>Attributes:\n    time_cost_ms (int): \u8bf7\u6c42\u5904\u7406\u8017\u65f6\uff0c\u5355\u4f4d\u4e3a\u6beb\u79d2\n    task_id (Optional[int]): \u4efb\u52a1ID\uff0c\u53ef\u9009\u5b57\u6bb5</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.api.response.ResponseMeta.time_cost_ms", "modulename": "aether.api.response", "qualname": "ResponseMeta.time_cost_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.api.response.ResponseMeta.task_id", "modulename": "aether.api.response", "qualname": "ResponseMeta.task_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "aether.api.response.ResponseMeta.model_config", "modulename": "aether.api.response", "qualname": "ResponseMeta.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "aether.api.response.AetherResponse", "modulename": "aether.api.response", "qualname": "AetherResponse", "kind": "class", "doc": "<p>\u901a\u7528\u54cd\u5e94\u6a21\u578b\u7c7b</p>\n\n<p>\u7528\u4e8e\u5c01\u88c5API\u7684\u7edf\u4e00\u54cd\u5e94\u683c\u5f0f\uff0c\u652f\u6301\u6cdb\u578b\u8f93\u51fa\u7c7b\u578b</p>\n\n<p>Attributes:\n    success (bool): \u8bf7\u6c42\u662f\u5426\u6210\u529f\n    output (Optional[T]): \u54cd\u5e94\u6570\u636e\u5185\u5bb9\uff0c\u7c7b\u578b\u4e3a\u6cdb\u578bT\uff0c\u53ef\u9009\u5b57\u6bb5\n    meta (ResponseMeta): \u54cd\u5e94\u5143\u6570\u636e\u4fe1\u606f\n    error (Optional[str]): \u9519\u8bef\u4fe1\u606f\uff0c\u5f53\u8bf7\u6c42\u5931\u8d25\u65f6\u63d0\u4f9b\u8be6\u7ec6\u9519\u8bef\u63cf\u8ff0\uff0c\u53ef\u9009\u5b57\u6bb5</p>\n", "bases": "pydantic.main.BaseModel, typing.Generic[~T]"}, {"fullname": "aether.api.response.AetherResponse.success", "modulename": "aether.api.response", "qualname": "AetherResponse.success", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.api.response.AetherResponse.output", "modulename": "aether.api.response", "qualname": "AetherResponse.output", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[~T]"}, {"fullname": "aether.api.response.AetherResponse.meta", "modulename": "aether.api.response", "qualname": "AetherResponse.meta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": aether.api.response.ResponseMeta"}, {"fullname": "aether.api.response.AetherResponse.error", "modulename": "aether.api.response", "qualname": "AetherResponse.error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.api.response.with_timing_response", "modulename": "aether.api.response", "qualname": "with_timing_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">AetherResponse</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.api.tool_type", "modulename": "aether.api.tool_type", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.api.tool_type.ToolType", "modulename": "aether.api.tool_type", "qualname": "ToolType", "kind": "class", "doc": "<p>\u652f\u6301\u7684\u6a21\u578b\u7c7b\u578b\u679a\u4e3e\u7c7b</p>\n\n<p>\u6a21\u578b\u7c7b\u578b\u6309\u7167\u4f7f\u7528\u6765\u6e90\u6216\u63a8\u7406\u6846\u67b6\u5206\u7c7b\uff0c\u4f8b\u5982\uff1a</p>\n\n<ul>\n<li>OPENAI_* \u8868\u793a\u57fa\u4e8e OpenAI \u63a5\u53e3\u7684\u6a21\u578b</li>\n<li>LOCAL_* \u8868\u793a\u672c\u5730\u52a0\u8f7d\u7684\u6a21\u578b\uff08Torch \u6216\u5176\u4ed6\uff09</li>\n<li>HF_* \u8868\u793a\u57fa\u4e8e HuggingFace Transformers/Diffusers \u7684\u6a21\u578b</li>\n<li>ULTRA_* \u8868\u793a\u57fa\u4e8e Ultralytics YOLO \u7cfb\u5217</li>\n</ul>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "aether.api.tool_type.ToolType.OPENAI_CHAT", "modulename": "aether.api.tool_type", "qualname": "ToolType.OPENAI_CHAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.OPENAI_CHAT: &#x27;openai_chat&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.OPENAI_EMBEDDING", "modulename": "aether.api.tool_type", "qualname": "ToolType.OPENAI_EMBEDDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.OPENAI_EMBEDDING: &#x27;openai_embedding&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.LOCAL_OPENAI", "modulename": "aether.api.tool_type", "qualname": "ToolType.LOCAL_OPENAI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.LOCAL_OPENAI: &#x27;local_openai&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.HF_CLS", "modulename": "aether.api.tool_type", "qualname": "ToolType.HF_CLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.HF_CLS: &#x27;hf_cls&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.HF_QA", "modulename": "aether.api.tool_type", "qualname": "ToolType.HF_QA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.HF_QA: &#x27;hf_qa&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.HF_SD", "modulename": "aether.api.tool_type", "qualname": "ToolType.HF_SD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.HF_SD: &#x27;hf_stable_diffusion&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.HF_GROUNDING_DINO", "modulename": "aether.api.tool_type", "qualname": "ToolType.HF_GROUNDING_DINO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.HF_GROUNDING_DINO: &#x27;hf_grounding_dino&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.YOLO_ULTRA", "modulename": "aether.api.tool_type", "qualname": "ToolType.YOLO_ULTRA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.YOLO_ULTRA: &#x27;yolo_ultralytics&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.YOLO_PT", "modulename": "aether.api.tool_type", "qualname": "ToolType.YOLO_PT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.YOLO_PT: &#x27;yolo_torch&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.TORCH_GAN", "modulename": "aether.api.tool_type", "qualname": "ToolType.TORCH_GAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.TORCH_GAN: &#x27;torch_gan&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.TORCH_CLS", "modulename": "aether.api.tool_type", "qualname": "ToolType.TORCH_CLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.TORCH_CLS: &#x27;torch_classification&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.TORCH_SEG", "modulename": "aether.api.tool_type", "qualname": "ToolType.TORCH_SEG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.TORCH_SEG: &#x27;torch_segmentation&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.ONNX_MODEL", "modulename": "aether.api.tool_type", "qualname": "ToolType.ONNX_MODEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.ONNX_MODEL: &#x27;onnx_model&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.REGISTER_MODEL", "modulename": "aether.api.tool_type", "qualname": "ToolType.REGISTER_MODEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.REGISTER_MODEL: &#x27;register_model&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.FETCH_RESULT", "modulename": "aether.api.tool_type", "qualname": "ToolType.FETCH_RESULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.FETCH_RESULT: &#x27;fetch_result&#x27;&gt;"}, {"fullname": "aether.api.tool_type.ToolType.GET_TOOLS", "modulename": "aether.api.tool_type", "qualname": "ToolType.GET_TOOLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ToolType.GET_TOOLS: &#x27;get_tools&#x27;&gt;"}, {"fullname": "aether.call", "modulename": "aether.call", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.augment", "modulename": "aether.call.augment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.augment.image_augment", "modulename": "aether.call.augment.image_augment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.augment.image_augment.ImageCvAugment", "modulename": "aether.call.augment.image_augment", "qualname": "ImageCvAugment", "kind": "class", "doc": "<p>Abstract base class for all Aether clients.</p>\n", "bases": "aether.call.base.BaseClient"}, {"fullname": "aether.call.augment.image_augment.ImageCvAugment.__init__", "modulename": "aether.call.augment.image_augment", "qualname": "ImageCvAugment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aether.call.augment.image_augment.ImageCvAugment.call", "modulename": "aether.call.augment.image_augment", "qualname": "ImageCvAugment.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.base", "modulename": "aether.call.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.base.BaseClient", "modulename": "aether.call.base", "qualname": "BaseClient", "kind": "class", "doc": "<p>Abstract base class for all Aether clients.</p>\n", "bases": "abc.ABC"}, {"fullname": "aether.call.base.BaseClient.__init__", "modulename": "aether.call.base", "qualname": "BaseClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">BaseToolConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aether.call.base.BaseClient.config", "modulename": "aether.call.base", "qualname": "BaseClient.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.base.BaseClient.session", "modulename": "aether.call.base", "qualname": "BaseClient.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.base.BaseClient.tool", "modulename": "aether.call.base", "qualname": "BaseClient.tool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.base.BaseClient.tool_model", "modulename": "aether.call.base", "qualname": "BaseClient.tool_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.base.BaseClient.create_task", "modulename": "aether.call.base", "qualname": "BaseClient.create_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">AetherRequest</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">AetherTask</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.base.BaseClient.get_tool", "modulename": "aether.call.base", "qualname": "BaseClient.get_tool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">AetherRequest</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">AetherTool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.base.BaseClient.threaded_task_wrapper", "modulename": "aether.call.base", "qualname": "BaseClient.threaded_task_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.base.BaseClient.dispose", "modulename": "aether.call.base", "qualname": "BaseClient.dispose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.base.BaseClient.call", "modulename": "aether.call.base", "qualname": "BaseClient.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">AetherRequest</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">AetherResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client", "modulename": "aether.call.client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.client.ActivatedToolRegistry", "modulename": "aether.call.client", "qualname": "ActivatedToolRegistry", "kind": "class", "doc": "<p>\u5168\u5c40\u6fc0\u6d3b\u5de5\u5177\u6ce8\u518c\u8868\uff08\u61d2\u52a0\u8f7d\u5355\u4f8b\uff09</p>\n"}, {"fullname": "aether.call.client.ActivatedToolRegistry.instance", "modulename": "aether.call.client", "qualname": "ActivatedToolRegistry.instance", "kind": "function", "doc": "<p>\u83b7\u53d6\u5355\u4f8b\u5b9e\u4f8b\uff08\u61d2\u52a0\u8f7d\uff09</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ActivatedToolRegistry</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client.ActivatedToolRegistry.register", "modulename": "aether.call.client", "qualname": "ActivatedToolRegistry.register", "kind": "function", "doc": "<p>\u6ce8\u518c\u6fc0\u6d3b\u5de5\u5177</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tool_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseClient</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client.ActivatedToolRegistry.get", "modulename": "aether.call.client", "qualname": "ActivatedToolRegistry.get", "kind": "function", "doc": "<p>\u6839\u636e ID \u83b7\u53d6\u6fc0\u6d3b\u5de5\u5177</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tool_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseClient</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client.ActivatedToolRegistry.unregister", "modulename": "aether.call.client", "qualname": "ActivatedToolRegistry.unregister", "kind": "function", "doc": "<p>\u79fb\u9664\u6fc0\u6d3b\u5de5\u5177</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tool_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client.ActivatedToolRegistry.all", "modulename": "aether.call.client", "qualname": "ActivatedToolRegistry.all", "kind": "function", "doc": "<p>\u83b7\u53d6\u5168\u90e8\u6fc0\u6d3b\u5de5\u5177\u526f\u672c</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseClient</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client.ClientManager", "modulename": "aether.call.client", "qualname": "ClientManager", "kind": "class", "doc": "<p>\u7edf\u4e00\u7ba1\u7406\u5ba2\u6237\u7aef\u7684\u751f\u547d\u5468\u671f\u548c\u7f13\u5b58</p>\n"}, {"fullname": "aether.call.client.ClientManager.__init__", "modulename": "aether.call.client", "qualname": "ClientManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">registry</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ActivatedToolRegistry</span>, </span><span class=\"param\"><span class=\"n\">session</span></span>)</span>"}, {"fullname": "aether.call.client.ClientManager.registry", "modulename": "aether.call.client", "qualname": "ClientManager.registry", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.client.ClientManager.session", "modulename": "aether.call.client", "qualname": "ClientManager.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.client.ClientManager.call", "modulename": "aether.call.client", "qualname": "ClientManager.call", "kind": "function", "doc": "<p>\u8c03\u7528\u5ba2\u6237\u7aef\u7684 call \u65b9\u6cd5</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">AetherRequest</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">AetherResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.client.GLOBAL_CLIENT_MANAGER", "modulename": "aether.call.client", "qualname": "GLOBAL_CLIENT_MANAGER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;aether.call.client.ClientManager object&gt;"}, {"fullname": "aether.call.config", "modulename": "aether.call.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.config.BaseToolConfig", "modulename": "aether.call.config", "qualname": "BaseToolConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.call.config.BaseToolConfig.tool_type", "modulename": "aether.call.config", "qualname": "BaseToolConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": aether.api.tool_type.ToolType"}, {"fullname": "aether.call.config.BaseToolConfig.description", "modulename": "aether.call.config", "qualname": "BaseToolConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.config.BaseToolConfig.model_config", "modulename": "aether.call.config", "qualname": "BaseToolConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.OpenAIChatConfig", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.OpenAIChatConfig.tool_type", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.OPENAI_CHAT: &#x27;openai_chat&#x27;&gt;]"}, {"fullname": "aether.call.config.OpenAIChatConfig.api_key", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.api_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.OpenAIChatConfig.base_url", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.base_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.config.OpenAIChatConfig.model_name", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.OpenAIChatConfig.temperature", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.temperature", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "aether.call.config.OpenAIChatConfig.max_tokens", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.max_tokens", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.config.OpenAIChatConfig.model_config", "modulename": "aether.call.config", "qualname": "OpenAIChatConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.OpenAIEmbeddingConfig", "modulename": "aether.call.config", "qualname": "OpenAIEmbeddingConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.OpenAIEmbeddingConfig.tool_type", "modulename": "aether.call.config", "qualname": "OpenAIEmbeddingConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.OPENAI_EMBEDDING: &#x27;openai_embedding&#x27;&gt;]"}, {"fullname": "aether.call.config.OpenAIEmbeddingConfig.api_key", "modulename": "aether.call.config", "qualname": "OpenAIEmbeddingConfig.api_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.OpenAIEmbeddingConfig.base_url", "modulename": "aether.call.config", "qualname": "OpenAIEmbeddingConfig.base_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.config.OpenAIEmbeddingConfig.model_name", "modulename": "aether.call.config", "qualname": "OpenAIEmbeddingConfig.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.OpenAIEmbeddingConfig.model_config", "modulename": "aether.call.config", "qualname": "OpenAIEmbeddingConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.LocalOpenAIConfig", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.LocalOpenAIConfig.tool_type", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.LOCAL_OPENAI: &#x27;local_openai&#x27;&gt;]"}, {"fullname": "aether.call.config.LocalOpenAIConfig.base_url", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig.base_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.LocalOpenAIConfig.model_name", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.LocalOpenAIConfig.temperature", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig.temperature", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "aether.call.config.LocalOpenAIConfig.max_tokens", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig.max_tokens", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.config.LocalOpenAIConfig.model_config", "modulename": "aether.call.config", "qualname": "LocalOpenAIConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.HFClassificationConfig", "modulename": "aether.call.config", "qualname": "HFClassificationConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.HFClassificationConfig.tool_type", "modulename": "aether.call.config", "qualname": "HFClassificationConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.HF_CLS: &#x27;hf_cls&#x27;&gt;]"}, {"fullname": "aether.call.config.HFClassificationConfig.model_path", "modulename": "aether.call.config", "qualname": "HFClassificationConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.HFClassificationConfig.task", "modulename": "aether.call.config", "qualname": "HFClassificationConfig.task", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.HFClassificationConfig.model_config", "modulename": "aether.call.config", "qualname": "HFClassificationConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.HFQAConfig", "modulename": "aether.call.config", "qualname": "HFQAConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.HFQAConfig.tool_type", "modulename": "aether.call.config", "qualname": "HFQAConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.HF_QA: &#x27;hf_qa&#x27;&gt;]"}, {"fullname": "aether.call.config.HFQAConfig.model_path", "modulename": "aether.call.config", "qualname": "HFQAConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.HFQAConfig.context_max_length", "modulename": "aether.call.config", "qualname": "HFQAConfig.context_max_length", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "aether.call.config.HFQAConfig.model_config", "modulename": "aether.call.config", "qualname": "HFQAConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.HFStableDiffusionConfig", "modulename": "aether.call.config", "qualname": "HFStableDiffusionConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.HFStableDiffusionConfig.tool_type", "modulename": "aether.call.config", "qualname": "HFStableDiffusionConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.HF_SD: &#x27;hf_stable_diffusion&#x27;&gt;]"}, {"fullname": "aether.call.config.HFStableDiffusionConfig.model_path", "modulename": "aether.call.config", "qualname": "HFStableDiffusionConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.HFStableDiffusionConfig.scheduler", "modulename": "aether.call.config", "qualname": "HFStableDiffusionConfig.scheduler", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.config.HFStableDiffusionConfig.use_safety_checker", "modulename": "aether.call.config", "qualname": "HFStableDiffusionConfig.use_safety_checker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.call.config.HFStableDiffusionConfig.model_config", "modulename": "aether.call.config", "qualname": "HFStableDiffusionConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.HFGroundingDINOConfig", "modulename": "aether.call.config", "qualname": "HFGroundingDINOConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.HFGroundingDINOConfig.tool_type", "modulename": "aether.call.config", "qualname": "HFGroundingDINOConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.HF_GROUNDING_DINO: &#x27;hf_grounding_dino&#x27;&gt;]"}, {"fullname": "aether.call.config.HFGroundingDINOConfig.model_path", "modulename": "aether.call.config", "qualname": "HFGroundingDINOConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.HFGroundingDINOConfig.model_config", "modulename": "aether.call.config", "qualname": "HFGroundingDINOConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.YOLOConfig", "modulename": "aether.call.config", "qualname": "YOLOConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.YOLOConfig.tool_type", "modulename": "aether.call.config", "qualname": "YOLOConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Literal[&lt;ToolType.YOLO_ULTRA: &#x27;yolo_ultralytics&#x27;&gt;], Literal[&lt;ToolType.YOLO_PT: &#x27;yolo_torch&#x27;&gt;]]"}, {"fullname": "aether.call.config.YOLOConfig.model_path", "modulename": "aether.call.config", "qualname": "YOLOConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.YOLOConfig.device", "modulename": "aether.call.config", "qualname": "YOLOConfig.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.config.YOLOConfig.model_config", "modulename": "aether.call.config", "qualname": "YOLOConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.TorchGANConfig", "modulename": "aether.call.config", "qualname": "TorchGANConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.TorchGANConfig.tool_type", "modulename": "aether.call.config", "qualname": "TorchGANConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.TORCH_GAN: &#x27;torch_gan&#x27;&gt;]"}, {"fullname": "aether.call.config.TorchGANConfig.model_path", "modulename": "aether.call.config", "qualname": "TorchGANConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.TorchGANConfig.z_dim", "modulename": "aether.call.config", "qualname": "TorchGANConfig.z_dim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.config.TorchGANConfig.model_config", "modulename": "aether.call.config", "qualname": "TorchGANConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.TorchClassificationConfig", "modulename": "aether.call.config", "qualname": "TorchClassificationConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.TorchClassificationConfig.tool_type", "modulename": "aether.call.config", "qualname": "TorchClassificationConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.TORCH_CLS: &#x27;torch_classification&#x27;&gt;]"}, {"fullname": "aether.call.config.TorchClassificationConfig.model_path", "modulename": "aether.call.config", "qualname": "TorchClassificationConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.TorchClassificationConfig.label_file", "modulename": "aether.call.config", "qualname": "TorchClassificationConfig.label_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.config.TorchClassificationConfig.model_config", "modulename": "aether.call.config", "qualname": "TorchClassificationConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.TorchSegmentationConfig", "modulename": "aether.call.config", "qualname": "TorchSegmentationConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.TorchSegmentationConfig.tool_type", "modulename": "aether.call.config", "qualname": "TorchSegmentationConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.TORCH_SEG: &#x27;torch_segmentation&#x27;&gt;]"}, {"fullname": "aether.call.config.TorchSegmentationConfig.model_path", "modulename": "aether.call.config", "qualname": "TorchSegmentationConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.TorchSegmentationConfig.input_size", "modulename": "aether.call.config", "qualname": "TorchSegmentationConfig.input_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "aether.call.config.TorchSegmentationConfig.model_config", "modulename": "aether.call.config", "qualname": "TorchSegmentationConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.config.ONNXModelConfig", "modulename": "aether.call.config", "qualname": "ONNXModelConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "BaseToolConfig"}, {"fullname": "aether.call.config.ONNXModelConfig.tool_type", "modulename": "aether.call.config", "qualname": "ONNXModelConfig.tool_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&lt;ToolType.ONNX_MODEL: &#x27;onnx_model&#x27;&gt;]"}, {"fullname": "aether.call.config.ONNXModelConfig.model_path", "modulename": "aether.call.config", "qualname": "ONNXModelConfig.model_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.config.ONNXModelConfig.input_names", "modulename": "aether.call.config", "qualname": "ONNXModelConfig.input_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "aether.call.config.ONNXModelConfig.output_names", "modulename": "aether.call.config", "qualname": "ONNXModelConfig.output_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "aether.call.config.ONNXModelConfig.model_config", "modulename": "aether.call.config", "qualname": "ONNXModelConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "aether.call.fetch_result_client", "modulename": "aether.call.fetch_result_client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.fetch_result_client.FetchResultClient", "modulename": "aether.call.fetch_result_client", "qualname": "FetchResultClient", "kind": "class", "doc": "<p>Abstract base class for all Aether clients.</p>\n", "bases": "aether.call.base.BaseClient"}, {"fullname": "aether.call.fetch_result_client.FetchResultClient.__init__", "modulename": "aether.call.fetch_result_client", "qualname": "FetchResultClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tool_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aether.call.fetch_result_client.FetchResultClient.tool_model", "modulename": "aether.call.fetch_result_client", "qualname": "FetchResultClient.tool_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.fetch_result_client.FetchResultClient.call", "modulename": "aether.call.fetch_result_client", "qualname": "FetchResultClient.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">AetherResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune", "modulename": "aether.call.finetune", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.callback", "modulename": "aether.call.finetune.callback", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.callback.TrainingStatus", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.epoch", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.epoch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.total_epochs", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.total_epochs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.loss", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.loss", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.save_path", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.save_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.eta_seconds", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.eta_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.eta_minutes", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.eta_minutes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "aether.call.finetune.callback.TrainingStatus.model_config", "modulename": "aether.call.finetune.callback", "qualname": "TrainingStatus.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback", "kind": "class", "doc": "<p>A class for objects that will inspect the state of the training loop at some events and take some decisions. At\neach of those events the following arguments are available:</p>\n\n<p>Args:\n    args ([<code>TrainingArguments</code>]):\n        The training arguments used to instantiate the [<code>Trainer</code>].\n    state ([<code>TrainerState</code>]):\n        The current state of the [<code>Trainer</code>].\n    control ([<code>TrainerControl</code>]):\n        The object that is returned to the [<code>Trainer</code>] and can be used to make some decisions.\n    model ([<code>PreTrainedModel</code>] or <code>torch.nn.Module</code>):\n        The model being trained.\n    tokenizer ([<code>PreTrainedTokenizer</code>]):\n        The tokenizer used for encoding the data. This is deprecated in favour of <code>processing_class</code>.\n    processing_class ([<code>PreTrainedTokenizer</code> or <code>BaseImageProcessor</code> or <code>ProcessorMixin</code> or <code>FeatureExtractionMixin</code>]):\n        The processing class used for encoding the data. Can be a tokenizer, a processor, an image processor or a feature extractor.\n    optimizer (<code>torch.optim.Optimizer</code>):\n        The optimizer used for the training steps.\n    lr_scheduler (<code>torch.optim.lr_scheduler.LambdaLR</code>):\n        The scheduler used for setting the learning rate.\n    train_dataloader (<code>torch.utils.data.DataLoader</code>, *optional*):\n        The current dataloader used for training.\n    eval_dataloader (<code>torch.utils.data.DataLoader</code>, <em>optional</em>):\n        The current dataloader used for evaluation.\n    metrics (<code>dict[str, float]</code>):\n        The metrics computed by the last evaluation phase.</p>\n\n<pre><code>    Those are only accessible in the event `on_evaluate`.\nlogs  (`dict[str, float]`):\n    The values to log.\n\n    Those are only accessible in the event `on_log`.\n</code></pre>\n\n<p>The <code>control</code> object is the only one that can be changed by the callback, in which case the event that changes it\nshould return the modified version.</p>\n\n<p>The argument <code>args</code>, <code>state</code> and <code>control</code> are positionals for all events, all the others are grouped in <code>kwargs</code>.\nYou can unpack the ones you need in the signature of the event using them. As an example, see the code of the\nsimple [<code>~transformers.PrinterCallback</code>].</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">PrinterCallback</span><span class=\"p\">(</span><span class=\"n\">TrainerCallback</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">on_log</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">control</span><span class=\"p\">,</span> <span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;total_flos&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">is_local_process_zero</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "transformers.trainer_callback.TrainerCallback"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.__init__", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">report_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">finetune</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"n\">TrainingStatus</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.start_time", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.total_epochs", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.total_epochs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.report_func", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.report_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.on_train_begin", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.on_train_begin", "kind": "function", "doc": "<p>Event called at the beginning of training.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.on_log", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.on_log", "kind": "function", "doc": "<p>Event called after logging the last logs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.callback.TrainingMonitorCallback.on_save", "modulename": "aether.call.finetune.callback", "qualname": "TrainingMonitorCallback.on_save", "kind": "function", "doc": "<p>Event called after a checkpoint save.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.peft_config", "modulename": "aether.call.finetune.peft_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.per_device_train_batch_size", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.per_device_train_batch_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.gradient_accumulation_steps", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.gradient_accumulation_steps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.learning_rate", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.learning_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.max_seq_length", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.max_seq_length", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.num_train_epochs", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.num_train_epochs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.logging_steps", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.logging_steps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.save_steps", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.save_steps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.fp16", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.fp16", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.bf16", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.bf16", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.gradient_checkpointing", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.gradient_checkpointing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.save_on_each_node", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.save_on_each_node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.lr_scheduler_type", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.lr_scheduler_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.lora_r", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.lora_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.lora_alpha", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.lora_alpha", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.lora_dropout", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.lora_dropout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.target_modules", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.target_modules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.task_type", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.task_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": peft.utils.peft_types.TaskType"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.output_dir", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "aether.call.finetune.peft_config.TrainingConfig.model_config", "modulename": "aether.call.finetune.peft_config", "qualname": "TrainingConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "aether.call.finetune.peft_config.model_size_to_number", "modulename": "aether.call.finetune.peft_config", "qualname": "model_size_to_number", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.peft_config.get_recommended_config_by_size", "modulename": "aether.call.finetune.peft_config", "qualname": "get_recommended_config_by_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">finetune</span><span class=\"o\">.</span><span class=\"n\">peft_config</span><span class=\"o\">.</span><span class=\"n\">TrainingConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.peft_config.training_config_to_lora_config", "modulename": "aether.call.finetune.peft_config", "qualname": "training_config_to_lora_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">finetune</span><span class=\"o\">.</span><span class=\"n\">peft_config</span><span class=\"o\">.</span><span class=\"n\">TrainingConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">peft</span><span class=\"o\">.</span><span class=\"n\">tuners</span><span class=\"o\">.</span><span class=\"n\">lora</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">LoraConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.peft_config.training_config_to_training_args", "modulename": "aether.call.finetune.peft_config", "qualname": "training_config_to_training_args", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">finetune</span><span class=\"o\">.</span><span class=\"n\">peft_config</span><span class=\"o\">.</span><span class=\"n\">TrainingConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">transformers</span><span class=\"o\">.</span><span class=\"n\">training_args</span><span class=\"o\">.</span><span class=\"n\">TrainingArguments</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.qwen", "modulename": "aether.call.finetune.qwen", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.finetune.qwen.process_func", "modulename": "aether.call.finetune.qwen", "qualname": "process_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">example</span>, </span><span class=\"param\"><span class=\"n\">tokenizer</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.qwen.qwen_lora_finetune", "modulename": "aether.call.finetune.qwen", "qualname": "qwen_lora_finetune", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.finetune.qwen.qwen_lora_eval", "modulename": "aether.call.finetune.qwen", "qualname": "qwen_lora_eval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">system_prompt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.get_tools_client", "modulename": "aether.call.get_tools_client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.get_tools_client.GetToolsClient", "modulename": "aether.call.get_tools_client", "qualname": "GetToolsClient", "kind": "class", "doc": "<p>Abstract base class for all Aether clients.</p>\n", "bases": "aether.call.base.BaseClient"}, {"fullname": "aether.call.get_tools_client.GetToolsClient.__init__", "modulename": "aether.call.get_tools_client", "qualname": "GetToolsClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">tool_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aether.call.get_tools_client.GetToolsClient.tool_model", "modulename": "aether.call.get_tools_client", "qualname": "GetToolsClient.tool_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.get_tools_client.GetToolsClient.call", "modulename": "aether.call.get_tools_client", "qualname": "GetToolsClient.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">AetherRequest</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">AetherResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.openai_client", "modulename": "aether.call.openai_client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.openai_client.OpenAIClient", "modulename": "aether.call.openai_client", "qualname": "OpenAIClient", "kind": "class", "doc": "<p>\u4e13\u95e8\u5904\u7406 OpenAI \u6a21\u578b\u7684\u5ba2\u6237\u7aef\uff0c\u5b9e\u73b0\u4e86 chat \u4efb\u52a1\u3002\nA client specialized in handling OpenAI models and the chat task.</p>\n", "bases": "aether.call.base.BaseClient"}, {"fullname": "aether.call.openai_client.OpenAIClient.__init__", "modulename": "aether.call.openai_client", "qualname": "OpenAIClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">OpenAIChatConfig</span></span>)</span>"}, {"fullname": "aether.call.openai_client.OpenAIClient.config", "modulename": "aether.call.openai_client", "qualname": "OpenAIClient.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.openai_client.OpenAIClient.call", "modulename": "aether.call.openai_client", "qualname": "OpenAIClient.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.register_model_client", "modulename": "aether.call.register_model_client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.register_model_client.RegisterModelClient", "modulename": "aether.call.register_model_client", "qualname": "RegisterModelClient", "kind": "class", "doc": "<p>\u4e13\u95e8\u5904\u7406\u6a21\u578b\u6ce8\u518c\u4efb\u52a1\u7684\u5ba2\u6237\u7aef\u3002\nA client specialized in handling model registration tasks.</p>\n", "bases": "aether.call.base.BaseClient"}, {"fullname": "aether.call.register_model_client.RegisterModelClient.__init__", "modulename": "aether.call.register_model_client", "qualname": "RegisterModelClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tool_model</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aether.call.register_model_client.RegisterModelClient.tool_model", "modulename": "aether.call.register_model_client", "qualname": "RegisterModelClient.tool_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.register_model_client.RegisterModelClient.call", "modulename": "aether.call.register_model_client", "qualname": "RegisterModelClient.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call", "modulename": "aether.call.threaded_call", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.__init__", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "aether.call.threaded_call.ThreadTask.task_id", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.task_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.func", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.args", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.kwargs", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.start", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTask.join", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.join", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTask.is_alive", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.is_alive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTask.status", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.status", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.result", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTask.error", "modulename": "aether.call.threaded_call", "qualname": "ThreadTask.error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTaskManager", "modulename": "aether.call.threaded_call", "qualname": "ThreadTaskManager", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "aether.call.threaded_call.ThreadTaskManager.submit", "modulename": "aether.call.threaded_call", "qualname": "ThreadTaskManager.submit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTaskManager.get_status", "modulename": "aether.call.threaded_call", "qualname": "ThreadTaskManager.get_status", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTaskManager.get_result", "modulename": "aether.call.threaded_call", "qualname": "ThreadTaskManager.get_result", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTaskManager.get_error", "modulename": "aether.call.threaded_call", "qualname": "ThreadTaskManager.get_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.ThreadTaskManager.get_task", "modulename": "aether.call.threaded_call", "qualname": "ThreadTaskManager.get_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">threaded_call</span><span class=\"o\">.</span><span class=\"n\">ThreadTask</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.threaded_call.GLOBAL_THREAD_TASK_MANAGER", "modulename": "aether.call.threaded_call", "qualname": "GLOBAL_THREAD_TASK_MANAGER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;aether.call.threaded_call.ThreadTaskManager object&gt;"}, {"fullname": "aether.call.yolo", "modulename": "aether.call.yolo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.yolo.inference", "modulename": "aether.call.yolo.inference", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.yolo.inference.letterbox_resize", "modulename": "aether.call.yolo.inference", "qualname": "letterbox_resize", "kind": "function", "doc": "<p>\u5c06\u56fe\u50cf\u6309\u6bd4\u4f8b\u7f29\u653e\u5e76\u586b\u5145\u5230\u65b0\u7684\u5f62\u72b6\uff0c\u4fdd\u6301\u957f\u5bbd\u6bd4\u4e0d\u53d8\u3002\n\u8fd4\u56de\uff1a\u586b\u5145\u540e\u7684\u56fe\u50cf\uff0c\u7f29\u653e\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u586b\u5145\u7684\u504f\u79fb\u91cf (pad_left, pad_top)\u3002</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">new_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"mi\">640</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.scale_coords", "modulename": "aether.call.yolo.inference", "qualname": "scale_coords", "kind": "function", "doc": "<p>\u5c06\u7f29\u653e\u548c\u586b\u5145\u540e\u7684\u5750\u6807\u6620\u5c04\u56de\u539f\u59cb\u56fe\u50cf\u5c3a\u5bf8\u3002</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xyxy</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">pad_left</span>, </span><span class=\"param\"><span class=\"n\">pad_top</span>, </span><span class=\"param\"><span class=\"n\">original_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.xywh2xyxy", "modulename": "aether.call.yolo.inference", "qualname": "xywh2xyxy", "kind": "function", "doc": "<p>\u5c06 [x_center, y_center, width, height] \u683c\u5f0f\u7684\u8fb9\u754c\u6846\u8f6c\u6362\u4e3a [x1, y1, x2, y2] \u683c\u5f0f\u3002\n(x1, y1) \u662f\u5de6\u4e0a\u89d2, (x2, y2) \u662f\u53f3\u4e0b\u89d2\u3002</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.non_max_suppression", "modulename": "aether.call.yolo.inference", "qualname": "non_max_suppression", "kind": "function", "doc": "<p>\u5bf9 YOLO \u6a21\u578b\u8f93\u51fa\u6267\u884c\u975e\u6781\u5927\u503c\u6291\u5236 (NMS)\u3002</p>\n\n<p>\u53c2\u6570:</p>\n\n<ul>\n<li>prediction: \u6a21\u578b\u7684\u539f\u59cb\u8f93\u51fa\uff0c\u5f62\u72b6\u4e3a [num_boxes, 4 + num_classes], e.g., [8400, 84]\u3002</li>\n<li>conf_thres: \u7f6e\u4fe1\u5ea6\u9608\u503c\u3002</li>\n<li>iou_thres: IOU\u9608\u503c\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de:</p>\n\n<ul>\n<li>detections with shape: nx6 (x1, y1, x2, y2, conf, cls)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prediction</span>, </span><span class=\"param\"><span class=\"n\">conf_thres</span><span class=\"o\">=</span><span class=\"mf\">0.45</span>, </span><span class=\"param\"><span class=\"n\">iou_thres</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.infer_with_pt", "modulename": "aether.call.yolo.inference", "qualname": "infer_with_pt", "kind": "function", "doc": "<p>\u4f7f\u7528PyTorch\u6a21\u578b\u5bf9\u56fe\u50cf\u8fdb\u884c\u63a8\u7406\uff0c\u8fd4\u56de\u68c0\u6d4b\u5230\u7684\u8fb9\u754c\u6846\u4fe1\u606f\u3002</p>\n\n<p>\u53c2\u6570:\n    model_path_or_instance (str | Any): \u6a21\u578b\u8def\u5f84\uff08\u5b57\u7b26\u4e32\uff09\u6216\u5df2\u52a0\u8f7d\u7684\u6a21\u578b\u5b9e\u4f8b\n    img (Union[np.ndarray, Image.Image]): \u8f93\u5165\u56fe\u50cf\uff0c\u652f\u6301numpy\u6570\u7ec4\u6216PIL\u56fe\u50cf\n    device (str, optional): \u6a21\u578b\u8fd0\u884c\u8bbe\u5907\uff0c\u9ed8\u8ba4\u4e3a\"cpu\"</p>\n\n<p>\u8fd4\u56de:\n    Tuple[Any, Optional[dict]]: \u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6a21\u578b\u6570\u636e\uff08\u52a0\u8f7d\u7684\u6a21\u578b\u6216\u539f\u59cb\u8f93\u5165\uff09\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u5305\u542b\u68c0\u6d4b\u7ed3\u679c\u7684\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a\n        {\n            \"bbox\": [\n                {\n                    \"x\": int,         # \u8fb9\u754c\u6846\u5de6\u4e0a\u89d2x\u5750\u6807\n                    \"y\": int,         # \u8fb9\u754c\u6846\u5de6\u4e0a\u89d2y\u5750\u6807\n                    \"w\": int,         # \u8fb9\u754c\u6846\u5bbd\u5ea6\n                    \"h\": int,         # \u8fb9\u754c\u6846\u9ad8\u5ea6\n                    \"conf\": float,    # \u7f6e\u4fe1\u5ea6\u5206\u6570\n                    \"class\": int,     # \u7c7b\u522b\u7d22\u5f15\n                    \"class_name\": str # \u7c7b\u522b\u540d\u79f0\uff08\u5982\u679c\u6a21\u578b\u63d0\u4f9b\uff09\n                },\n                ...\n            ]\n        }\n        \u5982\u679c\u53d1\u751f\u9519\u8bef\u5219\u4e24\u4e2a\u8fd4\u56de\u503c\u5747\u4e3aNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_path_or_instance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">conf_thres</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.25</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.infer_with_ultralytics", "modulename": "aether.call.yolo.inference", "qualname": "infer_with_ultralytics", "kind": "function", "doc": "<p>\u4f7f\u7528Ultralytics YOLO\u6a21\u578b\u5bf9\u56fe\u50cf\u8fdb\u884c\u63a8\u7406\u68c0\u6d4b</p>\n\n<p>\u53c2\u6570:\n    model_path_or_instance (str | Any): \u6a21\u578b\u8def\u5f84\u5b57\u7b26\u4e32\u6216\u5df2\u52a0\u8f7d\u7684\u6a21\u578b\u5b9e\u4f8b\n    img (Union[np.ndarray, Image.Image, str]): \u8f93\u5165\u56fe\u50cf\uff0c\u53ef\u4ee5\u662fnumpy\u6570\u7ec4\u3001PIL\u56fe\u50cf\u6216\u56fe\u50cf\u8def\u5f84\u5b57\u7b26\u4e32</p>\n\n<p>\u8fd4\u56de:\n    Tuple[Any, Optional[dict]]: \u5305\u542b\u6a21\u578b\u5b9e\u4f8b\u548c\u68c0\u6d4b\u7ed3\u679c\u7684\u5143\u7ec4\u3002\u68c0\u6d4b\u7ed3\u679c\u4e3a\u5b57\u5178\u683c\u5f0f\uff0c\u952e\u4e3a\"bbox\"\uff0c\u503c\u4e3a\u8fb9\u754c\u6846\u4fe1\u606f\u5217\u8868\uff0c\u6bcf\u4e2a\u8fb9\u754c\u6846\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a\n        - x (int): \u8fb9\u754c\u6846\u5de6\u4e0a\u89d2x\u5750\u6807\n        - y (int): \u8fb9\u754c\u6846\u5de6\u4e0a\u89d2y\u5750\u6807\n        - w (int): \u8fb9\u754c\u6846\u5bbd\u5ea6\n        - h (int): \u8fb9\u754c\u6846\u9ad8\u5ea6\n        - label (str): \u7c7b\u522b\u540d\u79f0\n        - confidence (float): \u7f6e\u4fe1\u5ea6\n        - class_id (int): \u7c7b\u522bID\n        \u5982\u679c\u63a8\u7406\u5931\u8d25\u5219\u8fd4\u56deNone\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u5143\u7d20</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_path_or_instance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">conf_thres</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.25</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.load_model", "modulename": "aether.call.yolo.inference", "qualname": "load_model", "kind": "function", "doc": "<p>\u52a0\u8f7d\u6a21\u578b</p>\n\n<p>\u53c2\u6570:\n    model_path_or_instance (str | Any): \u6a21\u578b\u8def\u5f84\u5b57\u7b26\u4e32\u6216\u5df2\u52a0\u8f7d\u7684\u6a21\u578b\u5b9e\u4f8b</p>\n\n<p>\u8fd4\u56de:\n    Any: \u52a0\u8f7d\u7684\u6a21\u578b\u5b9e\u4f8b</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path_or_instance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.inference.yolo_detect", "modulename": "aether.call.yolo.inference", "qualname": "yolo_detect", "kind": "function", "doc": "<p>\u4f7f\u7528YOLO\u6a21\u578b\u5bf9\u56fe\u50cf\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b</p>\n\n<p>\u53c2\u6570:\n    model_path_or_instance (str | Any): \u6a21\u578b\u8def\u5f84\u5b57\u7b26\u4e32\u6216\u5df2\u52a0\u8f7d\u7684\u6a21\u578b\u5b9e\u4f8b\n    img (Union[np.ndarray, Image.Image]): \u5f85\u68c0\u6d4b\u7684\u56fe\u50cf\uff0c\u53ef\u4ee5\u662fnumpy\u6570\u7ec4\u6216PIL\u56fe\u50cf\u5bf9\u8c61</p>\n\n<p>\u8fd4\u56de:\n    Tuple[Any, Optional[dict]]: \u68c0\u6d4b\u7ed3\u679c\u5143\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u6a21\u578b\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a\u68c0\u6d4b\u7ed3\u679c</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_path_or_instance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">conf_thres</span><span class=\"o\">=</span><span class=\"mf\">0.25</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.call.yolo.yolo_client", "modulename": "aether.call.yolo.yolo_client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.call.yolo.yolo_client.YoloClient", "modulename": "aether.call.yolo.yolo_client", "qualname": "YoloClient", "kind": "class", "doc": "<p>Abstract base class for all Aether clients.</p>\n", "bases": "aether.call.base.BaseClient"}, {"fullname": "aether.call.yolo.yolo_client.YoloClient.__init__", "modulename": "aether.call.yolo.yolo_client", "qualname": "YoloClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">YOLOConfig</span></span>)</span>"}, {"fullname": "aether.call.yolo.yolo_client.YoloClient.config", "modulename": "aether.call.yolo.yolo_client", "qualname": "YoloClient.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.yolo.yolo_client.YoloClient.tool", "modulename": "aether.call.yolo.yolo_client", "qualname": "YoloClient.tool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.call.yolo.yolo_client.YoloClient.call", "modulename": "aether.call.yolo.yolo_client", "qualname": "YoloClient.call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.common", "modulename": "aether.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.common.logger", "modulename": "aether.common.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.common.logger.emoji_format", "modulename": "aether.common.logger", "qualname": "emoji_format", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.db", "modulename": "aether.db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.db.basic", "modulename": "aether.db.basic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.db.basic.sql_url", "modulename": "aether.db.basic", "qualname": "sql_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "&#x27;sqlite:///./aether.db&#x27;"}, {"fullname": "aether.db.basic.engine", "modulename": "aether.db.basic", "qualname": "engine", "kind": "variable", "doc": "<p></p>\n", "default_value": "Engine(sqlite:///./aether.db)"}, {"fullname": "aether.db.basic.SessionLocal", "modulename": "aether.db.basic", "qualname": "SessionLocal", "kind": "variable", "doc": "<p></p>\n", "default_value": "sessionmaker(class_=&#x27;Session&#x27;, autocommit=False, bind=Engine(sqlite:///./aether.db), autoflush=False, expire_on_commit=True)"}, {"fullname": "aether.db.basic.Base", "modulename": "aether.db.basic", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "aether.db.basic.Base.__init__", "modulename": "aether.db.basic", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "aether.db.basic.Base.registry", "modulename": "aether.db.basic", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.orm.decl_api.registry", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "aether.db.basic.Base.metadata", "modulename": "aether.db.basic", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.MetaData", "default_value": "MetaData()"}, {"fullname": "aether.db.basic.get_engine", "modulename": "aether.db.basic", "qualname": "get_engine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.db.basic.get_session", "modulename": "aether.db.basic", "qualname": "get_session", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.db.init_db", "modulename": "aether.db.init_db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.db.init_db.create_database_if_not_exists", "modulename": "aether.db.init_db", "qualname": "create_database_if_not_exists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.db.init_db.init_db", "modulename": "aether.db.init_db", "qualname": "init_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.models", "modulename": "aether.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.task", "modulename": "aether.models.task", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task", "modulename": "aether.models.task.task", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask", "modulename": "aether.models.task.task", "qualname": "AetherTask", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "aether.models.task.task.AetherTask.__init__", "modulename": "aether.models.task.task", "qualname": "AetherTask.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "aether.models.task.task.AetherTask.aether_task_id", "modulename": "aether.models.task.task", "qualname": "AetherTask.aether_task_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.task_type", "modulename": "aether.models.task.task", "qualname": "AetherTask.task_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.created_at", "modulename": "aether.models.task.task", "qualname": "AetherTask.created_at", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.updated_at", "modulename": "aether.models.task.task", "qualname": "AetherTask.updated_at", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.is_deleted", "modulename": "aether.models.task.task", "qualname": "AetherTask.is_deleted", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.status", "modulename": "aether.models.task.task", "qualname": "AetherTask.status", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.req", "modulename": "aether.models.task.task", "qualname": "AetherTask.req", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task.AetherTask.to_dict", "modulename": "aether.models.task.task", "qualname": "AetherTask.to_dict", "kind": "function", "doc": "<p>\u5c06 ORM \u5b9e\u4f8b\u8f6c\u4e3a JSON \u53ef\u7528\u7684 dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.models.task.task.update_timestamp_before_update", "modulename": "aether.models.task.task", "qualname": "update_timestamp_before_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mapper</span>, </span><span class=\"param\"><span class=\"n\">connection</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.models.task.task_crud", "modulename": "aether.models.task.task_crud", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task_crud.AetherTaskCRUD", "modulename": "aether.models.task.task_crud", "qualname": "AetherTaskCRUD", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "aether.models.task.task_crud.AetherTaskCRUD.create", "modulename": "aether.models.task.task_crud", "qualname": "AetherTaskCRUD.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">AetherTask</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">AetherTask</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.task.task_crud.AetherTaskCRUD.get_by_id", "modulename": "aether.models.task.task_crud", "qualname": "AetherTaskCRUD.get_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">AetherTask</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.task.task_crud.AetherTaskCRUD.list", "modulename": "aether.models.task.task_crud", "qualname": "AetherTaskCRUD.list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">AetherTask</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.task.task_crud.AetherTaskCRUD.update", "modulename": "aether.models.task.task_crud", "qualname": "AetherTaskCRUD.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">updates</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">AetherTask</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.task.task_crud.AetherTaskCRUD.soft_delete", "modulename": "aether.models.task.task_crud", "qualname": "AetherTaskCRUD.soft_delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool", "modulename": "aether.models.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool", "modulename": "aether.models.tool.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool", "modulename": "aether.models.tool.tool", "qualname": "AetherTool", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "aether.models.tool.tool.AetherTool.__init__", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "aether.models.tool.tool.AetherTool.aether_tool_id", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.aether_tool_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.created_at", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.created_at", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.updated_at", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.updated_at", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.is_deleted", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.is_deleted", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.tool_name", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.tool_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.tool_config", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.tool_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.req", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.req", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.resp", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.resp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool.AetherTool.to_dict", "modulename": "aether.models.tool.tool", "qualname": "AetherTool.to_dict", "kind": "function", "doc": "<p>\u5c06 ORM \u5b9e\u4f8b\u8f6c\u4e3a JSON \u53ef\u7528\u7684 dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool.tool.update_timestamp_before_update", "modulename": "aether.models.tool.tool", "qualname": "update_timestamp_before_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mapper</span>, </span><span class=\"param\"><span class=\"n\">connection</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool.tool_crud", "modulename": "aether.models.tool.tool_crud", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool_crud.AetherToolCRUD", "modulename": "aether.models.tool.tool_crud", "qualname": "AetherToolCRUD", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "aether.models.tool.tool_crud.AetherToolCRUD.create", "modulename": "aether.models.tool.tool_crud", "qualname": "AetherToolCRUD.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">model_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">AetherTool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">AetherTool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool.tool_crud.AetherToolCRUD.get_by_id", "modulename": "aether.models.tool.tool_crud", "qualname": "AetherToolCRUD.get_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">tool_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">AetherTool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool.tool_crud.AetherToolCRUD.get_all", "modulename": "aether.models.tool.tool_crud", "qualname": "AetherToolCRUD.get_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">AetherTool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool.tool_crud.AetherToolCRUD.update", "modulename": "aether.models.tool.tool_crud", "qualname": "AetherToolCRUD.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">tool_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">update_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aether</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">AetherTool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.models.tool.tool_crud.AetherToolCRUD.delete", "modulename": "aether.models.tool.tool_crud", "qualname": "AetherToolCRUD.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">tool_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils", "modulename": "aether.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.utils.object_match", "modulename": "aether.utils.object_match", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.utils.object_match.validate", "modulename": "aether.utils.object_match", "qualname": "validate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.object_match.is_object_match", "modulename": "aether.utils.object_match", "qualname": "is_object_match", "kind": "function", "doc": "<p>\u5224\u65ad\u4e00\u4e2a JSON dict \u662f\u5426\u80fd\u5b8c\u6574\u6ee1\u8db3\u6307\u5b9a BaseModel \u7684\u5b57\u6bb5\uff08\u652f\u6301\u522b\u540d\uff09</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_cls</strong>:  \u8981\u9a8c\u8bc1\u7684 Pydantic BaseModel \u5b50\u7c7b</li>\n<li><strong>data</strong>:  \u8f93\u5165\u7684 JSON \u6570\u636e\uff08dict\uff09</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>\u5982\u679c\u53ef\u4ee5\u521b\u5efa\u8be5\u6a21\u578b\u5b9e\u4f8b\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219 False</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">model_cls</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.object_match.is_full_object_match", "modulename": "aether.utils.object_match", "qualname": "is_full_object_match", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">model_cls</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.object_match.is_full_object_match_with_alias", "modulename": "aether.utils.object_match", "qualname": "is_full_object_match_with_alias", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">model_cls</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.pydantic_utils", "modulename": "aether.utils.pydantic_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.utils.pydantic_utils.create_dynamic_model", "modulename": "aether.utils.pydantic_utils", "qualname": "create_dynamic_model", "kind": "function", "doc": "<p>\u52a8\u6001\u521b\u5efa\u4e00\u4e2a Pydantic \u6a21\u578b\u7c7b\u3002</p>\n\n<p>\u53c2\u6570:\n    model_name: \u6a21\u578b\u540d\u79f0\n    fields: \u5b57\u6bb5\u5b9a\u4e49\uff0c\u5f62\u5f0f\u4e3a {\u5b57\u6bb5\u540d: (\u7c7b\u578b, \u9ed8\u8ba4\u503c)}\n    aliases: \u5b57\u6bb5\u522b\u540d\u6620\u5c04 {\u5b57\u6bb5\u540d: \u522b\u540d}\uff08\u53ef\u9009\uff09</p>\n\n<p>\u8fd4\u56de:\n    \u65b0\u521b\u5efa\u7684 Pydantic \u6a21\u578b\u7c7b</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">aliases</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.pydantic_utils.create_nested_dynamic_model", "modulename": "aether.utils.pydantic_utils", "qualname": "create_nested_dynamic_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">aliases</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.schema_utils", "modulename": "aether.utils.schema_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aether.utils.schema_utils.TYPE_MAP", "modulename": "aether.utils.schema_utils", "qualname": "TYPE_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;int&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;float&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;bool&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;list&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;object&#x27;: &lt;class &#x27;dict&#x27;&gt;, &#x27;string&#x27;: &lt;class &#x27;str&#x27;&gt;}"}, {"fullname": "aether.utils.schema_utils.REVERSE_TYPE_MAP", "modulename": "aether.utils.schema_utils", "qualname": "REVERSE_TYPE_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;int&#x27;&gt;: &#x27;int&#x27;, &lt;class &#x27;float&#x27;&gt;: &#x27;float&#x27;, &lt;class &#x27;bool&#x27;&gt;: &#x27;bool&#x27;, &lt;class &#x27;list&#x27;&gt;: &#x27;list&#x27;, &lt;class &#x27;dict&#x27;&gt;: &#x27;object&#x27;, &lt;class &#x27;str&#x27;&gt;: &#x27;string&#x27;}"}, {"fullname": "aether.utils.schema_utils.schema_to_json", "modulename": "aether.utils.schema_utils", "qualname": "schema_to_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "aether.utils.schema_utils.json_to_schema", "modulename": "aether.utils.schema_utils", "qualname": "json_to_schema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();